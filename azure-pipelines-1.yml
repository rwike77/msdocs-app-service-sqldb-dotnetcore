# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

variables: 
- group: AzureResourcesVariableGroup

trigger:
- none

stages:
- stage: Build
  jobs: 
  - job: Build

    pool:
      vmImage: 'windows-latest'

    variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'

    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

    - task: VSTest@2
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

- stage: DeployAzureResources
  displayName: 'Deploy resources to Azure'
  dependsOn: Build
  condition: |
    succeeded()    
  jobs: 
  - job: DeployAzureResources
    pool: 
      vmImage: 'windows-latest'
    steps:
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'app-service-sqldb-dotnetcore-service-connection'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            # Create a resource group
            az group create --location $LOCATION --name $RESOURCEGROUPNAME
            echo "Created resource group $RESOURCEGROUPNAME"

            # Required resource access
            cat > manifest.json << EOF
            [
                {
                    "resourceAppId": "00000003-0000-0000-c000-000000000000",
                    "resourceAccess": [
                      {
                            "id": "e1fe6dd8-ba31-4d61-89e7-88639da4683d",
                            "type": "Scope"
                        }
                    ]
                }
            ]
            EOF

            # Create App Service plan
            az appservice plan create -g $RESOURCEGROUPNAME -n $SVCPLANNAME --sku FREE
            echo "Created App Service plan"

            # Create key vault
            az keyvault create --name $KEYVAULTNAME --resource-group $RESOURCEGROUPNAME
            echo "Created key vault"

            az keyvault set-policy -n $KEYVAULTNAME --secret-permissions get set --object-id $PIPELINESPID
            echo "Set vault policy"

            az keyvault secret set --name "ADMINUSER" --vault-name $KEYVAULTNAME --value $ADMINUSER
            az keyvault secret set --name "ADMINPWD" --vault-name $KEYVAULTNAME --value $ADMINPWD

            echo "set secret"


      
- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  dependsOn: DeployAzureResources
  condition: |
    succeeded()    
  jobs: 
  - job: Dev
    pool: 
      vmImage: 'windows-latest'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.DefaultWorkingDirectory)'
    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'app-service-sqldb-dotnetcore-service-connection'
        appType: 'webApp'
        WebAppName: '$(WEBAPPNAMEDEV)'
        packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'         
    - task: AzureAppServiceSettings@1
      inputs:
        azureSubscription: 'app-service-sqldb-dotnetcore-service-connection'
        appName: '$(WEBAPPNAMEDEV)'
        resourceGroupName: '$(RESOURCEGROUPNAME)'
        connectionStrings: |
          [
            {
              "name": "MyDbConnection",
              "value": "Server=tcp:$(SQLSERVERNAMEDEV).database.windows.net,1433;Initial Catalog=tododb;Persist Security Info=False;User ID=$(ADMINUSER);Password=$(ADMINPWD);MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;",
              "type": "SqlAzure",
              "slotSetting": false
            }
          ]

- stage: 'Test'
  displayName: 'Deploy to the test environment'
  dependsOn: DeployAzureResources
  condition: |
    succeeded()    
  jobs: 
  - job: Dev
    pool: 
      vmImage: 'windows-latest'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.DefaultWorkingDirectory)'
    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'app-service-sqldb-dotnetcore-service-connection'
        appType: 'webApp'
        WebAppName: '$(WEBAPPNAMETEST)'
        packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'         
    - task: AzureAppServiceSettings@1
      inputs:
        azureSubscription: 'app-service-sqldb-dotnetcore-service-connection'
        appName: '$(WEBAPPNAMETEST)'
        resourceGroupName: '$(RESOURCEGROUPNAME)'
        connectionStrings: |
          [
            {
              "name": "MyDbConnection",
              "value": "Server=tcp:$(SQLSERVERNAMETEST).database.windows.net,1433;Initial Catalog=tododb;Persist Security Info=False;User ID=$(ADMINUSER);Password=$(ADMINPWD);MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;",
              "type": "SqlAzure",
              "slotSetting": false
            }
          ]
- stage: 'Staging'
  displayName: 'Deploy to the staging environment'
  dependsOn: DeployAzureResources
  condition: |
    succeeded()    
  jobs: 
  - job: Dev
    pool: 
      vmImage: 'windows-latest'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.DefaultWorkingDirectory)'
    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'app-service-sqldb-dotnetcore-service-connection'
        appType: 'webApp'
        WebAppName: '$(WEBAPPNAMESTAGING)'
        packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'         
    - task: AzureAppServiceSettings@1
      inputs:
        azureSubscription: 'app-service-sqldb-dotnetcore-service-connection'
        appName: '$(WEBAPPNAMESTAGING)'
        resourceGroupName: '$(RESOURCEGROUPNAME)'
        connectionStrings: |
          [
            {
              "name": "MyDbConnection",
              "value": "Server=tcp:$(SQLSERVERNAMESTAGING).database.windows.net,1433;Initial Catalog=tododb;Persist Security Info=False;User ID=$(ADMINUSER);Password=$(ADMINPWD);MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;",
              "type": "SqlAzure",
              "slotSetting": false
            }
          ]