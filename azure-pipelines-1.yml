# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

variables: 
- group: AzureResourcesVariableGroup

trigger:
- none

stages:
- stage: Build
  jobs: 
  - job: Build

    pool:
      vmImage: 'windows-latest'

    variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'

    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

    - task: VSTest@2
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

- stage: DeployAzureResources
  displayName: 'Deploy resources to Azure'
  dependsOn: Build
  condition: |
    succeeded()    
  jobs: 
  - job: DeployAzureResources
    pool: 
      vmImage: 'windows-latest'
    steps:
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'app-service-sqldb-dotnetcore-service-connection'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            # Create app registration for test client
            appIdTestClient=$(az ad app create --display-name $TESTCLIENTNAME --is-fallback-public-client true --sign-in-audience AzureADMyOrg --query appId --output tsv)

            # Create a resource group
            az group create --location $LOCATION --name $RESOURCEGROUPNAME
            echo "Created resource group $RESOURCEGROUPNAME"

            # Create key vault
            az keyvault create --name $KEYVAULTNAME --resource-group $RESOURCEGROUPNAME
            echo "Created key vault"

            az keyvault set-policy -n $KEYVAULTNAME --secret-permissions get set --object-id $PIPELINESPID
            echo "Set vault policy"

            ADMINPWD=$(openssl rand -base64 14)
            az keyvault secret set --name ADMINUSER --vault-name $KEYVAULTNAME --value $ADMINUSER
            echo "Set user secret ADMINUSER"
            az keyvault secret set --name ADMINPWD --vault-name $KEYVAULTNAME --value $ADMINPWD
            echo "Set pw secret ADMINPWD"

            testsecret=$(az keyvault secret show --name 'ADMINUSER' --vault-name $KEYVAULTNAME)
            echo "Test secret: $testsecret"

            # create test users
            TESTUSER1PWD=$(openssl rand -base64 14)
            TESTUSER2PWD=$(openssl rand -base64 14)
            az keyvault secret set --name TESTUSER1 --vault-name $KEYVAULTNAME --value $TESTUSER1
            az keyvault secret set --name TESTUSER1PWD --vault-name $KEYVAULTNAME --value $TESTUSER1PWD
            az ad user create --display-name $TESTUSER1 --password $TESTUSER1PWD --user-principal-name "${TESTUSER1}@fourthcoffeetest.onmicrosoft.com"
            echo "created user $TESTUSER1"

            az keyvault secret set --name TESTUSER2 --vault-name $KEYVAULTNAME --value $TESTUSER2
            az keyvault secret set --name TESTUSER2PWD --vault-name $KEYVAULTNAME --value $TESTUSER2PWD
            az ad user create --display-name $TESTUSER2 --password $TESTUSER2PWD --user-principal-name "${TESTUSER2}@fourthcoffeetest.onmicrosoft.com"
            echo "created user $TESTUSER2"




            # Required resource access
            cat > manifest.json << EOF
            [
                {
                    "resourceAppId": "00000003-0000-0000-c000-000000000000",
                    "resourceAccess": [
                        {
                            "id": "e1fe6dd8-ba31-4d61-89e7-88639da4683d",
                            "type": "Scope"
                        }
                    ]
                }
            ]
            EOF

            # Create App Service plan
            az appservice plan create -g $RESOURCEGROUPNAME -n $SVCPLANNAME --sku FREE
            echo "Created App Service plan"



            ### Create Test resources
            # create and configure Azure SQL logical server and Azure SQL database
            az sql server create -l $LOCATION -g $RESOURCEGROUPNAME -n $SQLSERVERNAMETEST -u $ADMINUSER -p $ADMINPWD
            az sql db create -g $RESOURCEGROUPNAME -s $SQLSERVERNAMETEST -n $DBNAME --service-objective Basic
            az sql server firewall-rule create -g $RESOURCEGROUPNAME -s $SQLSERVERNAMETEST -n allowazure --start-ip-address 0.0.0.0 --end-ip-address 0.0.0.0
            echo "Created SQL server and SQL DB and SQL server firewall"

            # create and configure an Azure App Service web app
            az webapp create -g $RESOURCEGROUPNAME -p $SVCPLANNAME -n $WEBAPPNAMETEST
            echo "Created App Service webapp"

            redirectUriTest="https://$WEBAPPNAMETEST.azurewebsites.net/.auth/login/aad/callback"
            homePageUrlTest="https://$WEBAPPNAMETEST.azurewebsites.net"

            # Create app registration for App Service authentication
            appIdTest=$(az ad app create --display-name $WEBAPPNAMETEST --query appId --output tsv)
            echo "Registered app: $appIdTest"

            # Get secret from the app for App Service authentication
            secretTest=$(az ad app credential reset --id $appIdTest --query password --output tsv)
            echo "Got secret"

            az config set extension.use_dynamic_install=yes_without_prompt
            az extension add --name authV2

            # Set identifier URI, homepage, redirect URI, and resource access
            az ad app update --id $appIdTest --identifier-uris api://$appIdTest --web-redirect-uris $redirectUriTest  --web-home-page-url $homePageUrlTest --required-resource-accesses @manifest.json
            echo "Updated app"

            issuerTest="https://sts.windows.net/$TENANTID/"

            az webapp config appsettings set --name $WEBAPPNAMETEST --resource-group $RESOURCEGROUPNAME --slot-settings MICROSOFT_PROVIDER_AUTHENTICATION_SECRET=$secretTest
            echo "Set web app settings"

            az webapp auth microsoft update --name $WEBAPPNAMETEST --resource-group $RESOURCEGROUPNAME --client-id $appIdTest --secret-setting MICROSOFT_PROVIDER_AUTHENTICATION_SECRET --allowed-audiences $redirectUriTest  --issuer $issuerTest
            echo "Set EasyAuth settings"

      
- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  dependsOn: DeployAzureResources
  condition: |
    succeeded()    
  jobs: 
  - job: Dev
    pool: 
      vmImage: 'windows-latest'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.DefaultWorkingDirectory)'
    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'app-service-sqldb-dotnetcore-service-connection'
        appType: 'webApp'
        WebAppName: '$(WEBAPPNAMEDEV)'
        packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'         
    - task: AzureAppServiceSettings@1
      inputs:
        azureSubscription: 'app-service-sqldb-dotnetcore-service-connection'
        appName: '$(WEBAPPNAMEDEV)'
        resourceGroupName: '$(RESOURCEGROUPNAME)'
        connectionStrings: |
          [
            {
              "name": "MyDbConnection",
              "value": "Server=tcp:$(SQLSERVERNAMEDEV).database.windows.net,1433;Initial Catalog=tododb;Persist Security Info=False;User ID=$(ADMINUSER);Password=$(ADMINPWD);MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;",
              "type": "SqlAzure",
              "slotSetting": false
            }
          ]

- stage: 'Test'
  displayName: 'Deploy to the test environment'
  dependsOn: DeployAzureResources
  condition: |
    succeeded()    
  jobs: 
  - job: Dev
    pool: 
      vmImage: 'windows-latest'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.DefaultWorkingDirectory)'
    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'app-service-sqldb-dotnetcore-service-connection'
        appType: 'webApp'
        WebAppName: '$(WEBAPPNAMETEST)'
        packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'         
    - task: AzureAppServiceSettings@1
      inputs:
        azureSubscription: 'app-service-sqldb-dotnetcore-service-connection'
        appName: '$(WEBAPPNAMETEST)'
        resourceGroupName: '$(RESOURCEGROUPNAME)'
        connectionStrings: |
          [
            {
              "name": "MyDbConnection",
              "value": "Server=tcp:$(SQLSERVERNAMETEST).database.windows.net,1433;Initial Catalog=tododb;Persist Security Info=False;User ID=$(ADMINUSER);Password=$(ADMINPWD);MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;",
              "type": "SqlAzure",
              "slotSetting": false
            }
          ]
- stage: 'Staging'
  displayName: 'Deploy to the staging environment'
  dependsOn: DeployAzureResources
  condition: |
    succeeded()    
  jobs: 
  - job: Dev
    pool: 
      vmImage: 'windows-latest'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.DefaultWorkingDirectory)'
    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'app-service-sqldb-dotnetcore-service-connection'
        appType: 'webApp'
        WebAppName: '$(WEBAPPNAMESTAGING)'
        packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'         
    - task: AzureAppServiceSettings@1
      inputs:
        azureSubscription: 'app-service-sqldb-dotnetcore-service-connection'
        appName: '$(WEBAPPNAMESTAGING)'
        resourceGroupName: '$(RESOURCEGROUPNAME)'
        connectionStrings: |
          [
            {
              "name": "MyDbConnection",
              "value": "Server=tcp:$(SQLSERVERNAMESTAGING).database.windows.net,1433;Initial Catalog=tododb;Persist Security Info=False;User ID=$(ADMINUSER);Password=$(ADMINPWD);MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;",
              "type": "SqlAzure",
              "slotSetting": false
            }
          ]